"""
for i in range(img.shape[0]):
    for j in range(img.shape[1]):
        lx = abs(i-x)
        ly = abs(j-y)
        l = pow(lx, 2) + pow(ly, 2)
        if l > pow(radius, 2):
            img[i, j] = 0
"""

#cv2.waitKey(0)

#plt.figure()

#plt.subplot(1,2,1), plt.imshow(img)
"""

"""
plt.figure()
plt.subplot(1,4,1), plt.imshow(img)
plt.subplot(1,4,2), plt.imshow(ff)
plt.subplot(1,4,3), plt.imshow(one)
#plt.subplot(1,4,4), plt.imshow(gg)
plt.show()
"""

"""
img = cv2.GaussianBlur(img, (3, 3), 0)

canny = cv2.Canny(img, 50, 150)


print canny.shape[0]
color = (255, 255, 255)
for i in range(0, canny.shape[0], 20):
    cv2.line(canny, (0, i+20), (canny.shape[1]-1, i+20), (255, 255, 255), 1)
print canny
#cv2.imshow('Canny', canny)
"""


plt.figure()
for i in xrange(len(filters)):
    plt.subplot(2, 8, i + 1)
    plt.imshow(filters[i], cmap='gray')

# this is for build the Gabor filter
def build_filters():
    filters = []
    ksize = 33
    lamba = 0.1
    for thta in np.arange(0, np.pi, np.pi / 8):
        kern = cv2.getGaborKernel((ksize, ksize), 4.0, thta, lamba, 5, 0, ktype=cv2.CV_32F)
        kern /= 1.5 * kern.sum()
        filters.append(kern)

    return filters



    filters = []
    ksize = 33
    lamba = 0.1
    sigma = 4.0
    gamma = 5
    sigma_x = sigma
    sigma_y = float(sigma) / gamma
    nstds = 3
    psi = 0
    for theta in np.arange(0, np.pi, np.pi / 8):
        xmax = max(abs(nstds * sigma_x * np.cos(theta)), abs(nstds * sigma_y * np.sin(theta)))
        xmax = np.ceil(max(1, xmax))
        ymax = max(abs(nstds * sigma_x * np.sin(theta)), abs(nstds * sigma_y * np.cos(theta)))
        ymax = np.ceil(max(1, ymax))
        xmin = -xmax
        ymin = -ymax
        (y, x) = np.meshgrid(np.arange(ymin, ymax + 1), np.arange(xmin, xmax + 1))

        # Rotation
        x_theta = x * np.cos(theta) + y * np.sin(theta)
        y_theta = -x * np.sin(theta) + y * np.cos(theta)

        gb = np.exp(-.5 * (x_theta ** 2 / sigma_x ** 2 + y_theta ** 2 / sigma_y ** 2)) * np.cos(2 * np.pi / lamba * x_theta + psi)
        filters.append(gb)
